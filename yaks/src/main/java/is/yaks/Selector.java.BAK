package is.yaks;

public final class Selector implements Comparable<Selector> {

    private String path;
    private String predicate;
    private String fragment;
    private String toString;


    public Selector(String s) throws IllegalArgumentException {
        if (s == null) {
            throw new NullPointerException("The given selector is null");
        }
        if (s.isEmpty()) {
            throw new IllegalArgumentException("Invalid selector (empty String)");
        }

        int q = s.indexOf('?');
        int h = s.indexOf('#');
        if (q == -1 && h == -1) {
            this.path = s;
            this.predicate = "";
            this.fragment = "";
        } else if (h > 0) {
            if (q == -1 || q > h) {
                this.path = s.substring(0, h);
                this.predicate = "";
                this.fragment = s.substring(h+1);
            } else {
                this.path = s.substring(0, q);
                this.predicate = s.substring(q+1, h);
                this.fragment = s.substring(h+1);
            }
        } else {
            this.path = s.substring(0, q);
            this.predicate = s.substring(q+1);
            this.fragment = "";
        }

        this.toString = path + (predicate.isEmpty() ? "" : "?"+predicate) + (fragment.isEmpty() ? "" : "#"+fragment);
    }

    private Selector(String path, String predicate, String fragment) {
        this.path = path;
        this.predicate = predicate;
        this.fragment = fragment;
        this.toString = path + (predicate.isEmpty() ? "" : "?"+predicate) + (fragment.isEmpty() ? "" : "#"+fragment);
    }

    public String getPath() {
        return path;
    }

    public String getPredicate() {
        return predicate;
    }

    public String getFragment() {
        return fragment;
    }

    protected String getOptionalPart() {
        return predicate + (fragment.isEmpty() ? "" : "#"+fragment);
    }

    @Override
    public String toString() {
        return toString;
    }

    @Override
    public int compareTo(Selector s) {
        return this.toString.compareTo(s.toString);
    }

    @Override
    public boolean equals(Object object) {
        if (object == null) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (object instanceof Selector) {
            return this.toString.equals(((Selector) object).toString);
        }
        return false;
    }

    public boolean isRelative() {
        return path.length() == 0 || path.charAt(0) != '/';
    }

    public Selector addPrefix(Path prefix) {
        return new Selector(prefix.toString() + this.path, this.predicate, this.fragment);
    }

}